import numpy
from PIL import Image


class ImageProcessor:

    def __init__(self):
        pass

    def load(self, path):
        try:
            img = numpy.array(Image.open(path))
            width = numpy.size(img, 1)
            height = numpy.size(img, 0)
            print("Loading image of dimensions {} x {}".format(width, height))
            return(img)
        except AttributeError:
            print("Error in loading file, wrong path")
            return(None)
        except FileNotFoundError:
            print("Error in loading file, wrong path")
            return(None)
        except:
            print("Something Wrong Happened")
            return(None)

    def display(self, array):
        try:
            to_disp = Image.fromarray(array, 'RGBA')
            to_disp.show()
        except:
            print("Can't display this")


class ScrapBooker:

    def __init__(self):
        pass

    def crop(self, array, dim, pos):
        if pos[0] + dim[0] > numpy.size(array,0):
            print("Out of array on axe[0]")
            return(None)
        if pos[1] + dim[1] > numpy.size(array,1):
            print("Out of array on axe[1]")
            return(None)
        return(array[pos[0]:pos[0] + dim[0],pos[1]:pos[1] + dim[1]])

    def thin(self, array, n, axis):
        pass

    def juxtapose(self, array, n, axis):
        pass

    def mosaic(array, dimensions):
        pass


imp = ImageProcessor()
arr = imp.load("rick.png")
scrap = ScrapBooker()

test = numpy.array((range(1,6),range(6,11),range(11,16)))
print(test)

start = 1 # Index where you want to start.
newtest = test[0:3]
print(newtest)
print(scrap.crop(test, (3,2), (0,0)))
#imp.display(arr)
